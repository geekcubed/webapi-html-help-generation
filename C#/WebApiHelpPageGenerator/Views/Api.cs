// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace WebApiHelpPage
{
    using System.Web.Http.Description;
    using System.Web.Http.Controllers;
    using System.Collections.ObjectModel;
    using WebApiHelpPage.Models;
    using System.Web.Http;
    using System.Web;
    using System.Linq;
    using System.Threading;
    using System.Net.Http.Headers;
    using System.Collections.Generic;
    using WebApiHelpPage;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\Api.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Api : ApiBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 13 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\Api.tt"

    var description = Model.ApiDescription;
    var title = description.HttpMethod.Method + " " + description.RelativePath;

            
            #line default
            #line hidden
            this.Write("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n\t<meta charset=\"utf-8\">\r\n    <meta h" +
                    "ttp-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" conten" +
                    "t=\"width=device-width, initial-scale=1\">\r\n    <title>");
            
            #line 24 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\Api.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(title));
            
            #line default
            #line hidden
            this.Write(@"</title>
	<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"">
	<link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"">
</head>
<body>
	<nav class=""navbar navbar-inverse navbar-fixed-top"">
		<div class=""container"">
			<div class=""navbar-header"">
			  <button type=""button"" class=""navbar-toggle collapsed"" data-toggle=""collapse"" data-target=""#navbar"" aria-expanded=""false"" aria-controls=""navbar"">
				<span class=""sr-only"">Toggle navigation</span>
				<span class=""icon-bar""></span>
				<span class=""icon-bar""></span>
				<span class=""icon-bar""></span>
			  </button>
			  <a class=""navbar-brand"" href=""index.html"">API Documentation</a>
			</div>
		</div>
	</nav>

	<div class=""container"">
		");
            
            #line 1 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"

    bool hasParameters = description.ParameterDescriptions.Count > 0;
    bool hasRequestSamples = Model.SampleRequests.Count > 0;
    bool hasResponseSamples = Model.SampleResponses.Count > 0;

            
            #line default
            #line hidden
            this.Write("\r\n<div class=\"jumbotron\">\r\n\t<h1>");
            
            #line 8 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description.HttpMethod.Method));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 8 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description.RelativePath));
            
            #line default
            #line hidden
            this.Write("</h1>\r\n\t");
            
            #line 9 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 if (description.Documentation != null)
    { 
            
            #line default
            #line hidden
            this.Write("        <p>");
            
            #line 11 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(description.Documentation));
            
            #line default
            #line hidden
            this.Write("</p>\r\n    ");
            
            #line 12 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 }
    else
    { 
            
            #line default
            #line hidden
            this.Write("        <p>No documentation available.</p>\r\n    ");
            
            #line 16 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-sm-12 col-md-10 col-md-offset-1 col-l" +
                    "g-8 col-lg-offset-2\">\r\n\t");
            
            #line 20 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 if (hasParameters || hasRequestSamples)
    { 
            
            #line default
            #line hidden
            this.Write("        <h2>Request Information</h2>\r\n        ");
            
            #line 23 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 if (hasParameters)
        { 
            
            #line default
            #line hidden
            this.Write("            <h3>Parameters</h3>\r\n            ");
            
            #line 1 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"

    Collection<ApiParameterDescription> parameters = Model.ApiDescription.ParameterDescriptions;

            
            #line default
            #line hidden
            this.Write("<table class=\"table table-striped table-hover\">\r\n    <thead>\r\n    <tr><th>Name</t" +
                    "h><th>Description</th><th>Additional information</th></tr>\r\n    </thead>\r\n    <t" +
                    "body>\r\n    ");
            
            #line 9 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 foreach (ApiParameterDescription parameter in parameters)
    {
        string parameterDocumentation = parameter.Documentation != null ?
            parameter.Documentation :
            "No documentation available.";
    
        // Don't show CancellationToken because it's a special parameter
        if (!typeof(CancellationToken).IsAssignableFrom(parameter.ParameterDescriptor.ParameterType))
        { 
            
            #line default
            #line hidden
            this.Write("            <tr>\r\n                <td><b>");
            
            #line 19 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("</b></td>\r\n                <td>");
            
            #line 20 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterDocumentation));
            
            #line default
            #line hidden
            this.Write("</td>\r\n                <td>\r\n                    ");
            
            #line 22 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 switch (parameter.Source)
                    {
                        case ApiParameterSource.FromBody: 
            
            #line default
            #line hidden
            this.Write("                            <p>Define this parameter in the request <b>body</b>.<" +
                    "/p>\r\n                            ");
            
            #line 26 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 break;
                        case ApiParameterSource.FromUri: 
            
            #line default
            #line hidden
            this.Write("                            <p>Define this parameter in the request <b>URI</b>.</" +
                    "p>\r\n                            ");
            
            #line 29 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 break;
                        case ApiParameterSource.Unknown:
                        default: 
            
            #line default
            #line hidden
            this.Write("                            &nbsp;\r\n                            ");
            
            #line 33 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 break;
                    } 
            
            #line default
            #line hidden
            this.Write("                </td>\r\n            </tr>\r\n        ");
            
            #line 37 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Parameters.tt"
 } 
    } 
            
            #line default
            #line hidden
            this.Write("    </tbody>\r\n</table>");
            this.Write("\r\n        ");
            
            #line 27 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 } 
        if (hasRequestSamples)
        { 
            
            #line default
            #line hidden
            this.Write("            <h3>Request body formats</h3>\r\n\t\t\t");
            
            #line 31 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 var ModelSamples = Model.SampleRequests; 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 1 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"

    // Group the samples into a single tab if they are the same.
    Dictionary<string, object> samples = ModelSamples.GroupBy(pair => pair.Value).ToDictionary(
        pair => String.Join(", ", pair.Select(m => m.Key.ToString()).ToArray()), 
        pair => pair.Key);
    var mediaTypes = samples.Keys;

            
            #line default
            #line hidden
            this.Write("<div>\r\n    ");
            
            #line 9 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 foreach (var mediaType in mediaTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t<h4 class=\"sample-header\">");
            
            #line 11 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mediaType));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n        <div class=\"sample-content\">\r\n            <span><b>Sample:</b></sp" +
                    "an>\r\n            ");
            
            #line 14 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 var sample = samples[mediaType];
            if (sample == null)
            { 
            
            #line default
            #line hidden
            this.Write("                <p>Sample not available.</p>\r\n            ");
            
            #line 18 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
            else
            {
				if (sample is TextSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<code class=\"wrapped\">");
            
            #line 23 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(((TextSample)sample).Text)));
            
            #line default
            #line hidden
            this.Write("</code>\r\n\t\t\t\t");
            
            #line 24 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
				else if (sample is ImageSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<img src=\"((TextSample)sample).Src\" />\r\n\t\t\t\t");
            
            #line 28 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
				else if (sample is InvalidSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<div class=\"warning-message-container\">");
            
            #line 31 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(((InvalidSample)sample).ErrorMessage)));
            
            #line default
            #line hidden
            this.Write("</div>\r\n\t\t\t\t");
            
            #line 32 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
            } 
            
            #line default
            #line hidden
            this.Write("        </div>\r\n    ");
            
            #line 35 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</div>");
            this.Write("\r\n        ");
            
            #line 33 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 }
    } 
            
            #line default
            #line hidden
            this.Write(" \r\n\t</div>\r\n</div>\r\n<div class=\"row\">\r\n\t<div class=\"col-sm-12 col-md-10 col-md-of" +
                    "fset-1 col-lg-8 col-lg-offset-2\">\r\n\t");
            
            #line 39 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 if (hasResponseSamples)
    { 
            
            #line default
            #line hidden
            this.Write("     \r\n        <h2>Response Information</h2> \r\n        <h3>Response body formats<" +
                    "/h3>\r\n\t\t");
            
            #line 43 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 var ModelSamples = Model.SampleResponses; 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 1 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"

    // Group the samples into a single tab if they are the same.
    Dictionary<string, object> samples = ModelSamples.GroupBy(pair => pair.Value).ToDictionary(
        pair => String.Join(", ", pair.Select(m => m.Key.ToString()).ToArray()), 
        pair => pair.Key);
    var mediaTypes = samples.Keys;

            
            #line default
            #line hidden
            this.Write("<div>\r\n    ");
            
            #line 9 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 foreach (var mediaType in mediaTypes)
    { 
            
            #line default
            #line hidden
            this.Write("\t\t<h4 class=\"sample-header\">");
            
            #line 11 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mediaType));
            
            #line default
            #line hidden
            this.Write("</h4>\r\n        <div class=\"sample-content\">\r\n            <span><b>Sample:</b></sp" +
                    "an>\r\n            ");
            
            #line 14 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 var sample = samples[mediaType];
            if (sample == null)
            { 
            
            #line default
            #line hidden
            this.Write("                <p>Sample not available.</p>\r\n            ");
            
            #line 18 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
            else
            {
				if (sample is TextSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<code class=\"wrapped\">");
            
            #line 23 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(((TextSample)sample).Text)));
            
            #line default
            #line hidden
            this.Write("</code>\r\n\t\t\t\t");
            
            #line 24 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
				else if (sample is ImageSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<img src=\"((TextSample)sample).Src\" />\r\n\t\t\t\t");
            
            #line 28 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
				else if (sample is InvalidSample)
				{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<div class=\"warning-message-container\">");
            
            #line 31 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(((InvalidSample)sample).ErrorMessage)));
            
            #line default
            #line hidden
            this.Write("</div>\r\n\t\t\t\t");
            
            #line 32 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 }
            } 
            
            #line default
            #line hidden
            this.Write("        </div>\r\n    ");
            
            #line 35 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\Samples.tt"
 } 
            
            #line default
            #line hidden
            this.Write("</div>");
            this.Write("\r\n    ");
            
            #line 45 "D:\Tools\webapi-html-help-generation\C#\WebApiHelpPageGenerator\Views\DisplayTemplates\HelpPageApiModel.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t</div>\r\n<div>");
            this.Write("\r\n\t</div>\r\n\r\n\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/boo" +
                    "tstrap.min.js\"></script>\r\n</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ApiBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
